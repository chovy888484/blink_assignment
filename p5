let port;
let writer, reader;
let brightness = 0; 
let modeText = "N/A"; 

let redSlider, yellowSlider, greenSlider; 
let redState = 0, yellowState = 0, greenState = 0;

function setup() {
  createCanvas(500, 400);
  background(220);

  // 시리얼 포트 연결 버튼
  let connectButton = createButton("Connect to Arduino");
  connectButton.position(10, 10);
  connectButton.mousePressed(connectToArduino);

  // 슬라이더 (Red, Yellow, Green 신호 길이 조정)
  redSlider = createSlider(100, 5000, 2000, 100);
  redSlider.position(30, 50);
  yellowSlider = createSlider(100, 5000, 500, 100);
  yellowSlider.position(30, 80);
  greenSlider = createSlider(100, 5000, 2000, 100);
  greenSlider.position(30, 110);
  
  redSlider.input(sendData);
  yellowSlider.input(sendData);
  greenSlider.input(sendData);
}

function draw() {
  background(220);
  textSize(16);
  
  fill(0);
  text("🚦 신호등 설정", 10, 40);
  
  // 슬라이더 텍스트 정렬
  textAlign(LEFT, CENTER);
  text("🔴 빨강 시간: " + redSlider.value() + " ms", 250, 55);
  text("🟡 노랑 시간: " + yellowSlider.value() + " ms", 250, 85);
  text("🟢 초록 시간: " + greenSlider.value() + " ms", 250, 115);
  
  // 신호등 그래픽
  drawTrafficLight();

  // 모드 및 밝기 인디케이터
  drawModeIndicator();
  drawBrightnessIndicator();
}

// 🛑 신호등 그래픽 그리기
function drawTrafficLight() {
  let size = 50;  
  let spacing = 70; 
  let xOffset = 170;
  let yOffset = 220;

  fill(redState ? 'red' : 'gray');
  ellipse(xOffset, yOffset, size, size);

  fill(yellowState ? 'yellow' : 'gray');
  ellipse(xOffset + spacing, yOffset, size, size);

  fill(greenState ? 'green' : 'gray');
  ellipse(xOffset + spacing * 2, yOffset, size, size);
}

// 🎨 현재 모드 인디케이터
function drawModeIndicator() {
  let xOffset = 30;
  let yOffset = 300;
  let width = 140;
  let height = 30;

  // 모드에 따른 색상 설정
  let modeColor;
  if (modeText === "Emergency Mode") modeColor = "red";
  else if (modeText === "Blinking Mode") modeColor = "yellow";
  else if (modeText === "Normal Mode") modeColor = "green";
  else {
    modeColor = "gray";
    modeText = "OFF";
  }

  fill(modeColor);
  rect(xOffset, yOffset, width, height, 10);
  
  fill(0);
  textAlign(CENTER, CENTER);
  text(modeText, xOffset + width / 2, yOffset + height / 2);
}

// 🎨 밝기 인디케이터 (숫자로 표시)
function drawBrightnessIndicator() {
  textAlign(LEFT, CENTER);
  fill(0);
  text("📢 현재 모드:", 30, 280);
  text("💡 현재 밝기: " + brightness, 30, 340);
}

// 🔌 아두이노 연결 (웹 시리얼 API 사용)
async function connectToArduino() {
  try {
    port = await navigator.serial.requestPort();
    await port.open({ baudRate: 9600 });

    writer = port.writable.getWriter();
    readData();

    console.log("✅ Connected to Arduino!");
  } catch (err) {
    console.error("❌ Connection failed:", err);
  }
}

// 📥 시리얼 데이터 읽기 (수정된 버전)
async function readData() {
  const textDecoder = new TextDecoderStream();
  const readableStreamClosed = port.readable.pipeTo(textDecoder.writable);
  const reader = textDecoder.readable.getReader();

  try {
    let dataBuffer = "";

    while (true) {
      const { value, done } = await reader.read();
      if (done) {
        console.log("❌ Reader stopped.");
        break;
      }
      if (value) {
        dataBuffer += value;
        let lines = dataBuffer.split("\n");

        while (lines.length > 1) {
          let completeLine = lines.shift().trim();
          console.log("📩 Received:", completeLine);

          let parts = completeLine.split(",");
          if (parts.length === 7) {
            let isEmergency = parts[0] === "1";
            let isBlinking = parts[1] === "1";
            let isCycleRunning = parts[2] === "1"; // 🔥 기본 동작 활성화 여부 추가

            redState = parseInt(parts[3]);
            yellowState = parseInt(parts[4]);
            greenState = parseInt(parts[5]);
            brightness = parseInt(parts[6]);

            // 🔥 OFF 모드 인디케이터 반영
            if (!isCycleRunning && !isEmergency && !isBlinking) {
              modeText = "OFF";
            } else if (isEmergency) {
              modeText = "Emergency Mode";
            } else if (isBlinking) {
              modeText = "Blinking Mode";
            } else {
              modeText = "Normal Mode";
            }
          }
        }
        dataBuffer = lines[0];
      }
    }
  } catch (err) {
    console.error("❌ Read error:", err);
  } finally {
    reader.releaseLock();
  }
}


// 📤 시리얼 데이터 전송 (신호 시간 조정)
async function sendData() {
  if (port && writer) {
    let data = `${redSlider.value()},${yellowSlider.value()},${greenSlider.value()}\n`;
    const dataArray = new TextEncoder().encode(data);
    await writer.write(dataArray);
    console.log("📤 Sent to Arduino:", data);
  } else {
    console.log("⚠️ Serial connection not established.");
  }
}
